name: Reuseable Build and Push Docker Image

on:
  workflow_call:
    inputs:
      image:
        description: "Name of the image folder (e.g., 'asdf')"
        required: true
        type: string
      branch:
        description: "Target branch to commit updates"
        required: true
        type: string

    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_TOKEN:
        required: true
    outputs:
      should_build: 
        value: ${{ jobs.build.outputs.should_build }}
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Run build logic
        id: meta
        run: |
          export DEBUG=true
          source ./build.sh
          result=$(gen_build_data ${{ inputs.image }} false --output)
          echo "$result" > meta.json
          
          image_data=$(jq -c .IMAGE_DATA < meta.json)
          echo "image_data=$image_data" >> "$GITHUB_OUTPUT"
          
          build_version=$(jq -r .IMAGE_DATA.BUILD_VERSION < meta.json)
          should_build=$(jq -r .SHOULD_BUILD < meta.json)
     
          echo "build_version=$build_version" >> "$GITHUB_OUTPUT"
          echo "should_build=$should_build" >> "$GITHUB_OUTPUT"

          build_args=$(jq -r '.BUILD_ARGS[]' < meta.json)
          {
            echo "args<<EOF"
            echo "$build_args"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        if: steps.meta.outputs.should_build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./images/${{ inputs.image }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            docker.io/dmascot/${{ inputs.image }}:${{ steps.meta.outputs.build_version }}
            docker.io/dmascot/${{ inputs.image }}:latest
          build-args: ${{ steps.meta.outputs.args }}

      - name: Update build meta data
        if: steps.meta.outputs.should_build == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch origin ${{ inputs.branch }} || true
          git checkout ${{ inputs.branch }} || git checkout -b ${{ inputs.branch }}
          source ./common.sh
          write_metadata "${{ inputs.image }}" "${{ steps.meta.outputs.image_data }}"
          git add build-info.json
          git commit -m "chore(${{ inputs.image }}): update version to ${{ steps.meta.outputs.build_version }} in build-info.json after ${{ github.job }}"
          git push --set-upstream origin ${{ inputs.branch }}


    outputs:
      should_build: ${{ steps.meta.outputs.should_build }}  